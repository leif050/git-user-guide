git install
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

create repository
mkdir repo
cd repo
git init
git add xxx
git commit -m "comment"
git log
git log --pretty=oneline
git reset --hard commit-id
HEAD HEAD^ HEAD^^ HEAD~100
git reset --hard HEAD^
git reflog
all changes should be added from working to stage first then commit to branch 
git checkout -- filename (discard changes in working dir)
git reset HEAD file (unstage)
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

git rm filename

git remote add origin URL
git push -u origin master (加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令)
git push origin master 

git clone URL (clone from remote repository)

create branch
查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

用git log --graph命令可以看到分支合并图

git merge --no-ff -m "merge with no-ff" dev (--no-ff参数，表示禁用Fast forward)

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

git stash
git stash list
git stash apply
git stash drop
git stash pop

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。